Xia-an-Shu For my college thesis my job is to create a permissioned blockchain for interbank transactions, something that would replace traditional systems like SWIFT.

This is why we want to create a permissioned blockchain network that uses hyperledger besu as technology, the process must take into account the middle processes that the respective sender bank and receiver bank do: KYC verifications, AML verifications.

ALso, as middle currency we plan on using digital USD coin called USDC and check the rate exchange through their API too.

and finally we would like to provide our service as a BaaS (backend as a service) on which banks can make use of it through https rest petitions.

The problem i have right now is that i have only created a simple permissioned blockchain following a tutorial that shows how to do everything through sh commands and didn't use docker or other code.

Now i want to create a more professional project ussing docker. I have no experience on docker, nor blockchain projects. All i know is that i can do a lot of things with code projects structures but i have no idea of blockchain projects structure nor how to structure a docker project. I am not sure if one needs to use a certain language of progamming like python or java to create these kind of projects (if so then python please).

Please, tell me in detail step by step what do i have to do in order to accomplish what i am talking about. For now the KYC/AML checks will not be implemented, we will simply suposse that they were done.

Please on the detailed step by step include certain things (if very necessary) like telling me if i need to create a new repository what will be on there and what will be its purpose, what language or project structure would i use for the blockchain project itself, sfotware i would need and other important things considered by you




To create a permissioned blockchain for interbank transactions using Hyperledger Besu, Docker, and Python, follow these steps:

Set Up the Development Environment

Install Docker on your Linux machine:
sudo apt-get update
sudo apt-get install docker.io docker-compose

Install Python 3 and pip if not already installed:
sudo apt-get install python3 python3-pip

Create a New Git Repository

Initialize a new repository for your project:
mkdir interbank-blockchain
cd interbank-blockchain
git init


Set Up Hyperledger Besu Nodes with Docker

Create a docker-compose.yml file to define the Besu network:
version: '3.4'

services:
  besu-node1:
    image: hyperledger/besu:latest
    command: [
      "--network=dev",
      "--miner-enabled",
      "--miner-coinbase=0x0000000000000000000000000000000000000000",
      "--rpc-http-enabled",
      "--host-whitelist=*"
    ]
    ports:
      - "8545:8545"

  besu-node2:
    image: hyperledger/besu:latest
    command: [
      "--network=dev",
      "--rpc-http-enabled",
      "--host-whitelist=*"
    ]
    ports:
      - "8546:8545"

Configure the Permissioned Network

Create a config directory for network configurations.
Define genesis.json for blockchain parameters inside the config directory.
Set Up the Python Environment

Create a Python virtual environment:
python3 -m venv venv
source venv/bin/activate

Install required Python packages
pip install web3 flask

Create a requirements.txt file:
web3
flask

Develop the RESTful API Service

Create an app.py file for the Flask application:
from flask import Flask, request, jsonify
from web3 import Web3

app = Flask(__name__)
w3 = Web3(Web3.HTTPProvider('http://besu-node1:8545'))

@app.route('/transaction', methods=['POST'])
def create_transaction():
    data = request.get_json()
    # Assume KYC/AML checks are done
    # Implement transaction logic here
    return jsonify({'status': 'Transaction submitted'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)


Dockerize the Python Application

Create a Dockerfile for the Flask app:
FROM python:3.8-slim-buster
WORKDIR /app
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .
CMD [ "python", "./app.py" ]

Update docker-compose.yml to include the Flask service:
services:
  besu-node1:
    # existing configuration

  besu-node2:
    # existing configuration

  flask-app:
    build: .
    ports:
      - "5000:5000"
    depends_on:
      - besu-node1

Integrate USDC and Exchange Rate API

Use Web3.py to interact with the USDC smart contract.
Install exchange rate API package or use requests:
pip install requests
Update app.py to include exchange rate checks.


Run the Docker Compose

Start all services
docker-compose up




Test the Setup

Send REST requests to the Flask API:
curl -X POST -H "Content-Type: application/json" -d '{"amount":100}' http://localhost:5000/transaction



Project Structure:

interbank-blockchain/
├── app.py
├── config/
│   └── genesis.json
├── docker-compose.yml
├── Dockerfile
├── requirements.txt
└── README.md


Notes:

You will interact with the blockchain using Python (web3.py).
The REST API allows banks to interact with your blockchain via HTTPS.
Since KYC/AML checks are assumed done, focus on transaction logic.
USDC integration requires interacting with its smart contract on your network.
Exchange rates can be fetched using public APIs within your Flask app.